{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","searchQuery","setSearchQuery","givenMovie","setGivenMovie","movieNotFound","setMovieNotFound","queryEnd","setQueryEnd","queryInProgress","setQueryInProgress","submitHandler","event","query","preventDefault","fetch","then","res","json","catch","Response","Error","value","Title","Plot","Poster","imdbID","finally","onSubmit","htmlFor","type","id","placeholder","onChange","target","classNames","disabled","length","Object","keys","onClick","App","setMovies","newMovie","findIndex","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3a36029.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [givenMovie, setGivenMovie] = useState({} as Movie);\n  const [movieNotFound, setMovieNotFound] = useState(false);\n  const [queryEnd, setQueryEnd] = useState(false);\n  const [queryInProgress, setQueryInProgress] = useState(false);\n\n  const submitHandler = (event: React.FormEvent) => {\n    event.preventDefault();\n    setQueryInProgress(true);\n\n    getMovie(searchQuery).then((value) => {\n      if ('Title' in value) {\n        setGivenMovie({\n          title: value.Title,\n          description: value.Plot,\n          imgUrl: value.Poster !== 'N/A'\n            ? value.Poster\n            : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n          imdbUrl: `https://www.imdb.com/title/${value.imdbID}`,\n          imdbId: value.imdbID,\n        });\n      } else {\n        setMovieNotFound(true);\n      }\n    }).finally(() => {\n      setQueryInProgress(false);\n\n      setQueryEnd(true);\n    });\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => submitHandler(event)}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchQuery}\n              onChange={(event) => {\n                setSearchQuery(event.target.value);\n                setMovieNotFound(false);\n              }}\n            />\n          </div>\n\n          {movieNotFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light',\n                {\n                  'is-loading': queryInProgress,\n                })}\n              disabled={!searchQuery.length}\n            >\n              {queryEnd ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {Object.keys(givenMovie).length > 0 && searchQuery && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addMovie(givenMovie);\n                  setSearchQuery('');\n                  setGivenMovie({} as Movie);\n                }}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {Object.keys(givenMovie).length > 0\n        && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={givenMovie} />\n          </div>\n        )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=603ce446';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (newMovie: Movie) => {\n    if (movies.findIndex(movie => movie.imdbId === newMovie.imdbId)) {\n      setMovies(currentMovies => [...currentMovies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}